name: Jobs

on: 
  push: { branches: [main] }
  
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  #Test
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      # Cache
      - name: Cache
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      # Test
      - name: unityTestRunner
        uses: game-ci/unity-test-runner@v4.1.1
        with:
           githubToken: ${{ secrets.GITHUB_TOKEN }}
           testMode: PlayMode
      #Upload Test Result
      - name: Upload Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results
          path: reports/test-results

  #Test Report
  testReport:
    name: Test Report
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      #Download test result artifact
      - name: Use Test Result Artifact
        uses: actions/download-artifact@v4
        with:
          name: Test-Results
          path: reports/test-results
      #Test Report
      - name: Test Report
        uses: phoenix-actions/test-reporting@v8
        if: success() || failure()    # run this step even if previous step failed
        with:
          artifact: /reports/test-results/playmode-results.xml
          name: Test-Results         # Name of the check run which will be created
          path: reports/test-results/playmode-results.xml   # Path to test results
          reporter: dotnet-trx        # Format of test results
  
  # Build
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
         # - StandaloneWindows # Build a Windows standalone.
         # - Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: build
        uses: game-ci/unity-builder@v4
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
    # Output
      - name: output
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
  
  # Upload to itch.io
  UploadToItchIo:
    name: Upload to itch.io
    runs-on: ubuntu-latest
    needs: buildForAllSupportedPlatforms
    steps:
      #Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
      #Download Build Artifact
      - name: Use WebGL Artifact
        uses: actions/download-artifact@v4
        with:
          name: Build-WebGL
          path: build/WebGL
      #Push to Itch.io with Butler
      - name: Butler Push
        uses: yeslayla/butler-publish-itchio-action@v1.0.3
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: windows
          ITCH_GAME: ci-cd-upload-test
          ITCH_USER: Mafiya
          PACKAGE: build/WebGL